/* Module: Mainwindow / File: mainwindow.hh
 * Includes the data and functionality of the graphic user interface.
 */

#ifndef MAINWINDOW_HH
#define MAINWINDOW_HH

#include "gameboard.hh"
#include "numbertile.hh"
#include <QMainWindow>
#include <QTimer>
#include <QGraphicsScene>
#include <QGraphicsRectItem>
#include <vector>
#include <map>

using Colors = std::map<int, QColor>;
using Keys = std::map<int, Coords>;

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    // Constructor and destructor
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

    // Checks the goal and returns true if the given goal is a potens
    // of value 2. Otherwise returns false.
    bool check_goal(int goal_value, int base);

    // Takes and checks the seed and goal values given by the player.
    // Prints out error messages and sets default values when needed.
    void take_input();

    // Inits new game settings: inits gameboars, starts the times and sets
    // buttons and keys.
    void init_game();

    // Resets game settings: gameboard, timer, buttons and keys.
    void reset_game();

    // Draws out a new gameboard with empty squares.
    void init_graphic_gameboard();

    // Draws out the current game situation: Shows the tiles and their
    // values, moves and colors.
    void draw_tiles(Colors colors);

    // Controls the tile moves by the key actions.
    void keyPressEvent(QKeyEvent* event) override;

    // Prints out the winning or losing message and stops the timer. Sets
    // buttons and keys ready for a new game.
    void win();
    void lost();

    // Takes care of shooting time pulses and displaying the time.
    void update_LCD();

    // Sets the timer and time back to zero when the game is reseted.
    void reset_timer();

    // Controls the timer during pauses.
    void control_timer();

private:
    // Pointers to some salient gui components.
    Ui::MainWindow *ui_;
    QTimer* timer_;
    QGraphicsScene* scene_;

    // Pointer to the internal gameboard that coordinates the tiles.
    GameBoard* gameboard_;

    // External structure of the gameboard.
    std::vector<std::vector<QGraphicsRectItem*>> rects_;
    std::vector<std::vector<QGraphicsTextItem*>> texts_;

    // The seed value for spreading new tiles into the gameboard.
    // If the player does not give the seed, it is generated by
    // calendar time.
    int seed_;

    // The goal value is set in the beginning by the player.
    // Default value is used if the goal is not given.
    int goal_;

    // Needed for displaying the time and controlling the timer
    // functionality.
    int time_;

    // Helps to control button and key functionalities during
    // the game and between games.
    bool game_is_on_;

};
#endif // MAINWINDOW_HH
